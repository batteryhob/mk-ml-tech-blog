<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2021-05-18T01:23:16-05:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">머신러닝파트 기술블로그</title><subtitle></subtitle><entry><title type="html">AWS DynamoDB 연동하기</title><link href="http://0.0.0.0:4000/2021/05/16/DynamoDB-%EC%A0%84%EC%A7%80%ED%98%B8.html" rel="alternate" type="text/html" title="AWS DynamoDB 연동하기" /><published>2021-05-16T10:00:00-05:00</published><updated>2021-05-16T10:00:00-05:00</updated><id>http://0.0.0.0:4000/2021/05/16/DynamoDB-%EC%A0%84%EC%A7%80%ED%98%B8</id><content type="html" xml:base="http://0.0.0.0:4000/2021/05/16/DynamoDB-%EC%A0%84%EC%A7%80%ED%98%B8.html">&lt;h1 id=&quot;python으로-aws-dynamodb-연동하기-&quot;&gt;Python으로 AWS DynamoDB 연동하기 🤲&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Python을 사용하여 AWS DynamoDB 데이터 쿼리&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;boto3-설치&quot;&gt;boto3 설치&lt;/h2&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pip&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;boto3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;설치된 python 패키지 매니저로 boto3를 설치합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;boto3client-사용&quot;&gt;boto3.client 사용&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dynamodb = boto3.client('dynamodb', aws_access_key_id='본인의 Access ID', aws_secret_access_key='본인의 Secret Access Key', region_name='리전 입력')
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;boto3로 dynamoDB에 접근하는 방식은 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boto3.resource&lt;/code&gt; 와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boto3.client&lt;/code&gt; 두 가지 방법이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boto3.resource&lt;/code&gt;의 방식이 AWS의 공식 문서에 샘플로 등장하지만, 사용이 좀 더 간편한 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;boto3.client&lt;/code&gt; 방식을 소개하겠습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;parameter-설정&quot;&gt;Parameter 설정&lt;/h2&gt;

&lt;p&gt;dynamoDB를 사용할 때는 각 row의 column에 해당하는 type을 명시해야 데이터 조작이 가능합니다.&lt;/p&gt;

&lt;p&gt;자주 사용하는 type은 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;S: 문자열
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;S&quot;: &quot;Hello&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;N: 문자열
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;N&quot;: &quot;11.0&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;SS: 문자열 리스트
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;SS&quot;: [ &quot;Hello&quot;, &quot;Jiho&quot; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NS: 숫자 문자열 리스트&lt;/p&gt;

    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;NS&quot;: [ &quot;11.0&quot;, &quot;123.45&quot; ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;M: key-value 형태의 Map
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;M&quot;: {&quot;Name&quot;: {&quot;S&quot;: &quot;Joe&quot;}, &quot;Age&quot;: {&quot;N&quot;: &quot;35&quot;}}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;L: 다양한 타입의 List
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &quot;L&quot;: [ {&quot;S&quot;: &quot;Hello&quot;}, {&quot;S&quot;: &quot;Hello&quot;}, {&quot;S&quot;: &quot;Hello&quot;} ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;insert&quot;&gt;Insert&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;response = dynamodb.put_item(
    TableName='테이블 명', 
    Item={ 
            'column1':{ 
                'S': 'value1' 
            }, 
            'column2':{
                'S': 'value2' 
            }
        }
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;select&quot;&gt;Select&lt;/h2&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;response = dynamodb.get_item(
    TableName='string',
    Key={
            'column1':{ 
                'S': 'value1'
            }
        }
    )
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>전지호</name></author><category term="aws" /><category term="python" /><summary type="html">AWS에서 사용하는 대표적인 NoSQL 데이터베이스인 DynamoDB의 데이터를 Python을 사용하여 가져오는 것을 알아봅시다.</summary></entry><entry><title type="html">6월 머신러닝파트 월간 리뷰</title><link href="http://0.0.0.0:4000/2021/05/15/2106MonthlyReport-%EC%A0%84%EC%A7%80%ED%98%B8.html" rel="alternate" type="text/html" title="6월 머신러닝파트 월간 리뷰" /><published>2021-05-15T10:00:00-05:00</published><updated>2021-05-15T10:00:00-05:00</updated><id>http://0.0.0.0:4000/2021/05/15/2106MonthlyReport-%EC%A0%84%EC%A7%80%ED%98%B8</id><content type="html" xml:base="http://0.0.0.0:4000/2021/05/15/2106MonthlyReport-%EC%A0%84%EC%A7%80%ED%98%B8.html">&lt;h1 id=&quot;6월-리뷰-&quot;&gt;6월 리뷰 📆&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;For McKinsey&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;과금넛지&quot;&gt;과금넛지&lt;/h2&gt;

&lt;p&gt;과금넛지 내용을 넣고&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;디지털사이니지&quot;&gt;디지털사이니지&lt;/h2&gt;

&lt;p&gt;디지털 사이니지의 내용을 넣고&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;옥외광고-지역-선정&quot;&gt;옥외광고 지역 선정&lt;/h2&gt;

&lt;p&gt;디지털 사이니지의 내용을 넣고&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;상시-업무&quot;&gt;상시 업무&lt;/h2&gt;

&lt;p&gt;마무리한다&lt;/p&gt;</content><author><name>전지호</name></author><category term="monthlyreport" /><summary type="html">과금넛지와 디지털사이니지, 오프라인 광고지역 선정에 대한 리뷰입니다.</summary></entry><entry><title type="html">1편 | 머신러닝 서비스를 만들기 위한 MLOps</title><link href="http://0.0.0.0:4000/2021/05/13/MLOpsPrologue-%EC%A0%84%EC%A7%80%ED%98%B8.html" rel="alternate" type="text/html" title="1편 | 머신러닝 서비스를 만들기 위한 MLOps" /><published>2021-05-13T10:00:00-05:00</published><updated>2021-05-13T10:00:00-05:00</updated><id>http://0.0.0.0:4000/2021/05/13/MLOpsPrologue-%EC%A0%84%EC%A7%80%ED%98%B8</id><content type="html" xml:base="http://0.0.0.0:4000/2021/05/13/MLOpsPrologue-%EC%A0%84%EC%A7%80%ED%98%B8.html">&lt;h1 id=&quot;머신러닝-서비스를-만들고-싶은-분들에게-&quot;&gt;머신러닝 서비스를 만들고 싶은 분들에게 🤲&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;모델은 만들었는데 이제 어떻게 해야 하지?? 🚬&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;대부분의 데이터 과학자, 데이터 분석가, 머신러닝 엔지니어들은 실험과 학습과 같은 연구에 중점을 둡니다.&lt;/p&gt;

&lt;p&gt;예를 들겠습니다.&lt;/p&gt;

&lt;p&gt;당신은 사람 얼굴만 보면 정확한 범죄 확률을 예측해 모든 범죄를 막을 수 있는 머신러닝 프로젝트에 참여했습니다.&lt;/p&gt;

&lt;p&gt;수 많은 실험과 연구로 성능이 폭발적인 환상적인 모델을 만들었습니다. 모든 CCTV에 모델을 설치하면 마이너리티 리포트는 꿈이 아닙니다.&lt;/p&gt;

&lt;p&gt;이제 어떻게 할까요?&lt;/p&gt;

&lt;p&gt;전국의 CCTV 프로그래머에게 파이썬 설치 방법과 모델 파일을 첨부한 이메일을 발송할까요?&lt;/p&gt;

&lt;p&gt;아니면 전국의 CCTV 영상 파일을 매일 매일 받아 로컬 머신 혹은 사내에 설치된 DGX 머신에서 돌려 결과를 다시 전달할까요?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;위와-같은-방법들은-많은-문제를-포함합니다&quot;&gt;위와 같은 방법들은 많은 문제를 포함합니다.&lt;/h2&gt;

&lt;h3 id=&quot;첫째-모든-cctv의-컴퓨팅-사양이-같지-않습니다&quot;&gt;첫째, 모든 CCTV의 컴퓨팅 사양이 같지 않습니다.&lt;/h3&gt;

&lt;p&gt;내가 필요로 하는 프레임워크나 라이브러리가 설치가 안될 수 있습니다.&lt;/p&gt;

&lt;p&gt;로컬 컴퓨터에서 당연하게 사용하는 파이썬조차 설치가 힘들 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;둘째-수동-작업은-너무-힘듭니다&quot;&gt;둘째, 수동 작업은 너무 힘듭니다.&lt;/h3&gt;

&lt;p&gt;프로덕션 레벨에서의 반복적인 작업들은 연구 개발에 들어가야할 시간들을 뺏어갑니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;셋째-실험-환경과-프로덕션-환경이-분리되어-있지-못합니다&quot;&gt;셋째, 실험 환경과 프로덕션 환경이 분리되어 있지 못합니다.&lt;/h3&gt;

&lt;p&gt;작업 환경에 cronjob이나 airflow를 사용하여 배치를 돌릴 수 있습니다.&lt;/p&gt;

&lt;p&gt;그러나 실험 환경의 리소스를 나눠서 쓰게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;넷째-위-문제가-해결되었다-해도-모델을-업데이트할-때-마다-같은-작업을-반복해야-합니다&quot;&gt;넷째, 위 문제가 해결되었다 해도 모델을 업데이트할 때 마다 같은 작업을 반복해야 합니다.&lt;/h3&gt;

&lt;p&gt;힘들게 배포한 모델에 오류가 숨어있었습니다.&lt;/p&gt;

&lt;p&gt;더 많은 실험을 통해 모델의 성능이 눈에 띄게 좋아졌습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;새로운 라이브러리의 추가&lt;/strong&gt;, &lt;strong&gt;새로운 작업&lt;/strong&gt;, &lt;strong&gt;새로운 스케줄링&lt;/strong&gt;이 필요하다면 위 작업을 다시 해야할 까요?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;한 보고서에 따르면 AI를 다루는 기업은 &lt;strong&gt;88%&lt;/strong&gt;가&lt;/p&gt;

&lt;p&gt;위와 같은 문제로 인해 테스트 단계에서 벗어나지 못하고 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;이제-mlops&quot;&gt;이제, MLOps&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://www.freecodecamp.org/news/content/images/2021/03/Screenshot-2021-03-23-at-4.39.30-AM.png&quot; alt=&quot;MlOps 구글트랜드&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;mlops로-불리는-머신러닝-파이프라인은전-세계-모든-조직들이-공통적으로-고민하는-문제입니다&quot;&gt;MLOps로 불리는 머신러닝 파이프라인은&lt;br /&gt;전 세계 모든 조직들이 공통적으로 고민하는 문제입니다.&lt;/h3&gt;

&lt;p&gt;분석가와 머신러닝 엔지니어에 대한 관심이 지금보다 조금 적었을 때,&lt;/p&gt;

&lt;p&gt;SW 개발자들은 비슷한 문제를 오랜기간 고민했습니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://teckangaroo.com/wp-content/uploads/2019/08/Screenshot_85411.png&quot; alt=&quot;수 많은 CI/CD&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Git, Jenkins, Travis CI, TeamCity, Circle CI&lt;/p&gt;

&lt;p&gt;한 번쯤 들어보신 적 있는 위의 이름들은 로컬 컴퓨터의 작업 코드를 원격지 서버의 코드와 동일하게 보장하기 위한 도구들입니다.&lt;/p&gt;

&lt;p&gt;보통, 코드의 형상관리는 Git에서 하는게 일반적이죠.&lt;/p&gt;

&lt;p&gt;Git에 있는 마지막 형상 코드를 젠킨스등 CI/CD라 불리는 도구들을 통해서 원격지 서버에 배포했습니다.&lt;/p&gt;

&lt;p&gt;이를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DevOps&lt;/code&gt;라 부르고 있고,&lt;/p&gt;

&lt;p&gt;현재, 필드에서 말하는 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MLOps&lt;/code&gt;는 이 아이디어를 일정 부분 가져옵니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;devops와-mlops는-뭣이-같고-뭣이-다른데&quot;&gt;DevOps와 MLOps는 뭣이 같고, 뭣이 다른데??&lt;/h3&gt;

&lt;p&gt;일반적으로 웹 서비스를 구축할 때,&lt;/p&gt;

&lt;p&gt;과거에는 코드를 서버에 업로드시키는 것만으로도 배포가 완료되는 시절이 있었습니다.&lt;/p&gt;

&lt;p&gt;보통은 배치 작업같은 것이 필요없으니까, FTP같은 프로그램으로 서버에 올리면 끝났어요.&lt;/p&gt;

&lt;p&gt;하지만, 웹 프레임워크가 발전하고 프로그래밍 언어가 발전하면서 다양한 외부 프레임워크의 의존성이 강해졌고,&lt;/p&gt;

&lt;p&gt;곧 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;빌드&lt;/code&gt;라는 작업이 필요하게 됩니다.&lt;/p&gt;

&lt;p&gt;코드짜는 것도 짜증나는데 배포 단계가 늘어나는 걸 귀찮아했던 개발자들은&lt;/p&gt;

&lt;p&gt;Git 리포지터리의 마지막 코드를 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;빌드&lt;/code&gt;와 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;업로드&lt;/code&gt;를 대신해 주는 걸 생각하게 됩니다.&lt;/p&gt;

&lt;p&gt;좀 편해졌다 싶었더니, 외부 프레임워크가 점점 발전하다보니 또 문제가 생겨요.&lt;/p&gt;

&lt;p&gt;본질적으로 내 로컬 컴퓨터랑 서버 컴퓨터의 사양이 다르니 자꾸 오류가 생겨요.&lt;/p&gt;

&lt;p&gt;이번에 개발자들은 내 로컬 환경과 동일한 환경을 서버에 통째로 올려버리는 걸 만들어 버립니다.(=도커)&lt;/p&gt;

&lt;p&gt;점점 접점이 있다는 것이 느껴지시나요?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;주피터-설치하는-법-아나콘다-설치하는-법-텐서플로-설치하는-법&quot;&gt;주피터 설치하는 법, 아나콘다 설치하는 법, 텐서플로 설치하는 법&lt;/h3&gt;

&lt;p&gt;네이버에 검색하면서 다들 고생 한 번씩 해보셨을 겁니다.&lt;/p&gt;

&lt;p&gt;머신러닝 서비스는 웹 서비스에서 사용하는 라이브러리에 비해 설치가 굉장히 까다롭습니다.&lt;/p&gt;

&lt;p&gt;또, &lt;u&gt;버전 의존성이 매우 크지만, 호환성은 매우 취약합니다.&lt;/u&gt;&lt;/p&gt;

&lt;p&gt;머신러닝 서비스를 운영할 컴퓨터에 로컬 실험 환경과 같은 환경으로 라이브러리를 세팅할 자신 있으신가요?&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;도커&quot;&gt;도커&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;도커를 사용하는 것이 텐서플로를 사용하는 가장 쉬운 방법입니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;텐서플로 공식문서에 다운로드 챕터에 포함되어 있는 제일 첫 문구입니다.&lt;/p&gt;

&lt;p&gt;그렇지만, 아직도 머신러닝 엔지니어나 데이터 분석가들은 도커의 사용을 어려워합니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;도대체 도커를 왜 써야하는데??&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;혹시 DGX 머신을 가지고 있으신가요?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;수 많은 가상 환경과 버전이 충돌하는 프레임워크들로 범벅이 되어 있진 않은가요?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;GPU를 나눠서 실험 환경과 서비스 환경을 분리할 수 있을까요?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;다른 사람이 GPU를 점유하고 있을 때, 언제 끝나나 기다리시고 계신가요?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;제플린에서 머신러닝 코드를 실행하시나요?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;나의 코드가 제플린 서버를 멈추게 하여 다른 작업자의 야근을 유도하진 않았나요?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;내 코드가 환경에 비해 적은 리소스, 혹은 많은 리소스를 사용하진 않나요?&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;배치 작업을 하기 위해 airflow등 외부 도구에 의존하진 않나요?&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;결국-문제는-분리&quot;&gt;결국, 문제는 &lt;strong&gt;분리&lt;/strong&gt;&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;공통 환경을 사용하는 각 작업자의 독립적인 실험 환경 &lt;strong&gt;분리&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;실험 환경과 서비스 환경의 &lt;strong&gt;분리&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;분리&lt;/strong&gt;된 실험 환경과 서비스 환경의 &lt;strong&gt;동일한 환경 보장&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;도커는-작업-환경의-분리와-이식이-가능한-이-세상이-허락한-유일한-마약&quot;&gt;도커는 작업 환경의 분리와 이식이 가능한, 이 세상이 허락한 유일한 마약.&lt;/h3&gt;

&lt;p&gt;왜냐면, 단 한번만 익숙해지면 알아서 쓰게됩니다.&lt;/p&gt;

&lt;p&gt;👉&lt;a href=&quot;/2021/05/13/DockerForAnalysis-전지호.html&quot;&gt;&lt;u&gt;데이터 분석가를 위한 Docker&lt;/u&gt;&lt;/a&gt;👈&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;쿠버네티스&quot;&gt;쿠버네티스&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;어렵지만, 자세히 알지 못해도 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;도커 파일로 만든 컨테이너들의 생성(=코드의 실행)과 삭제(=리소스 부족으로 인한 폭파)와 스케줄링(=배치 작업)을 대신해주는 친절한 도구입니다.&lt;/p&gt;

&lt;p&gt;머신러닝 엔지니어와 분석가가 도커 파일만 작성할 줄 안다면,&lt;/p&gt;

&lt;p&gt;MLOps 개발자가 이 도구를 이용해 모델과 분석 코드의 배포, 스케줄링이 가능하게 해줄 겁니다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;다음-포스트는-아주-아주-아주-낮은-수준의-머신러닝-파이프라인을-다룰-예정입니다그런데도-양이-적지-않습니다-&quot;&gt;다음 포스트는 &lt;br /&gt;아주 아주 아주 낮은 수준의 머신러닝 파이프라인을 다룰 예정입니다.&lt;br /&gt;그런데도, 양이 적지 않습니다. 😹&lt;/h2&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://azurecomcdn.azureedge.net/mediahandler/acomblog/media/Default/blog/MLOPS%20featured%20image.png&quot; alt=&quot;Azure MLOps&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;다음 포스트에서는 파이프라인 뒷부분에 해당하는 모델 배포 자동화 파이프라인을 소개합니다.&lt;/p&gt;

&lt;p&gt;머신러닝파트가 운영하는 서비스에 구축되어 있는 환경입니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;모델과 머신러닝 프레임워크 환경의 자동 빌드&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;모델의 프로덕션 환경에 배포와 스케줄링&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;새로운 모델의 업데이트&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;배포된 모델의 모니터링와 관리&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;그 다음 포스트에서는 데이터 처리와 학습, 실험, 재 학습이 포함된 파이프라인을 소개할 것입니다.&lt;/p&gt;</content><author><name>전지호</name></author><category term="mlops" /><category term="aws" /><category term="kubenetes" /><summary type="html">머신러닝 실험 모델을 프로덕션 레벨로 사용하기 위한 필수적인 프로세스입니다. 로컬 컴퓨터, 제플린, 데이터브릭스에서만 사용해보았던 머신러닝 모델을 어떻게 해야 상용 서비스로 만들 수 있을까요? 머신러닝 엔지니어와 분석가가 개발자와의 업무 의존성을 줄이기 위한 머신러닝 인프라에 대해 설명합니다.</summary></entry><entry><title type="html">2편 | 머신러닝 서비스를 만들기 위한 MLOps</title><link href="http://0.0.0.0:4000/2021/04/15/MLOpsFirst-%EC%A0%84%EC%A7%80%ED%98%B8.html" rel="alternate" type="text/html" title="2편 | 머신러닝 서비스를 만들기 위한 MLOps" /><published>2021-04-15T11:00:00-05:00</published><updated>2021-04-15T11:00:00-05:00</updated><id>http://0.0.0.0:4000/2021/04/15/MLOpsFirst-%EC%A0%84%EC%A7%80%ED%98%B8</id><content type="html" xml:base="http://0.0.0.0:4000/2021/04/15/MLOpsFirst-%EC%A0%84%EC%A7%80%ED%98%B8.html">&lt;h1 id=&quot;랩스에서-아주-간단한-mlops-만들기-&quot;&gt;랩스에서 아주 간단한 MLOps 만들기 🤲&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;인텔리전스 랩스에서 가장 빠르게 AWS를 이용하여 MLOps를 구축하는 방법&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;같이-일하는-개발자에게-앞으로는-이렇게-말하세요&quot;&gt;같이 일하는 개발자에게 앞으로는 이렇게 말하세요!&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;MLOps 구축해주세요!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;다시-처음으로-돌아가서머신러닝-모델을-상용화하는-방법은-아주-간단합니다mlops가-구축되어-있다면요&quot;&gt;다시 처음으로 돌아가서,&lt;br /&gt;머신러닝 모델을 상용화하는 방법은 아주 간단합니다.&lt;br /&gt;&lt;u&gt;MLOps가 구축&lt;/u&gt;되어 있다면요&lt;/h3&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;첫째, 코드 작성하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;둘째, 도커파일 작성하기&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;셋째, 푸쉬!&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>전지호</name></author><category term="mlops" /><category term="aws" /><category term="kubenetes" /><summary type="html">인텔리전스 랩스에서 AWS를 이용하여 가장 쉽게 MLOps를 구축하는 방법</summary></entry><entry><title type="html">데이터 분석가를 위한 Docker</title><link href="http://0.0.0.0:4000/2021/04/15/DockerForAnalysis-%EC%A0%84%EC%A7%80%ED%98%B8.html" rel="alternate" type="text/html" title="데이터 분석가를 위한 Docker" /><published>2021-04-15T10:00:00-05:00</published><updated>2021-04-15T10:00:00-05:00</updated><id>http://0.0.0.0:4000/2021/04/15/DockerForAnalysis-%EC%A0%84%EC%A7%80%ED%98%B8</id><content type="html" xml:base="http://0.0.0.0:4000/2021/04/15/DockerForAnalysis-%EC%A0%84%EC%A7%80%ED%98%B8.html">&lt;h1 id=&quot;요망한-고래이야기-&quot;&gt;요망한 고래이야기 🐳&lt;/h1&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;주피터 설치가 귀찮다면… 🚬&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content><author><name>전지호</name></author><category term="docker" /><category term="kubenetes" /><summary type="html">도커는 개발자만을 위한 도구가 아닙니다. 데이터 분석가와 머신러닝 엔지니어 하물며 내 컴퓨터를 깨끗이 쓰고 싶은 사람에게도 적합합니다.</summary></entry><entry><title type="html">최혁근 샘플</title><link href="http://0.0.0.0:4000/2021/04/12/Sample-%EC%B5%9C%ED%98%81%EA%B7%BC.html" rel="alternate" type="text/html" title="최혁근 샘플" /><published>2021-04-12T10:00:00-05:00</published><updated>2021-04-12T10:00:00-05:00</updated><id>http://0.0.0.0:4000/2021/04/12/Sample-%EC%B5%9C%ED%98%81%EA%B7%BC</id><content type="html" xml:base="http://0.0.0.0:4000/2021/04/12/Sample-%EC%B5%9C%ED%98%81%EA%B7%BC.html">&lt;h1 id=&quot;object-detection-survey&quot;&gt;Object Detection: Survey!!!!!!!!!!!!&lt;/h1&gt;

&lt;p&gt;디지털 사이니지 프로젝트에는 여러가지 Deep Learning Task들이 존재한다.
그 중 가장 기초가 되는 Object Detection 관련 연구상황을 정리하고 Tensorflow를 이용한 실제 코드 구현을 실습하는 방법을 기록한다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Introduction&lt;/li&gt;
  &lt;li&gt;Problem Definition&lt;/li&gt;
  &lt;li&gt;Performence Measure&lt;/li&gt;
  &lt;li&gt;Dataset &amp;amp; Examples&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;1-introduction&quot;&gt;1. Introduction&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Representative tasks in computer vision&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://solution-userstats.s3.ap-northeast-1.amazonaws.com/techblogs/task.png&quot; alt=&quot;Object detection and other tasks&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Object Detection은 Image Classification task에 사물의 위치를 Bounding Box로 예측하는 Regression task가 추가된 문제이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_first/fig2_classification_example.PNG&quot; alt=&quot;image classification&quot; /&gt;
&lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_first/fig2_classification_example.PNG&quot; alt=&quot;object detection&quot; /&gt;
&lt;strong&gt;Object Detection = Multi-labeled classification + Bounding regression&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;현재 연구 진행상황
&lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_first/fig4_paper_trend_2019.PNG&quot; alt=&quot;Research history&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;적용분야&lt;/p&gt;

    &lt;p&gt;&lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_third/fig1.PNG&quot; alt=&quot;ADAS&quot; /&gt;
  &lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_third/fig2.PNG&quot; alt=&quot;CCTV&quot; /&gt;
  &lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_third/fig3.PNG&quot; alt=&quot;OCR&quot; /&gt;
  &lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_third/fig4.PNG&quot; alt=&quot;Aerial Image&quot; /&gt;
  &lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_third/fig5.PNG&quot; alt=&quot;Body Detection&quot; /&gt;
  &lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_third/fig7.PNG&quot; alt=&quot;Sport Analysis&quot; /&gt;
  &lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_third/fig8.PNG&quot; alt=&quot;Amazon Go&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-problem-definition&quot;&gt;2. Problem Definition&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;DATASET
    &lt;ul&gt;
      &lt;li&gt;$I$ - an image&lt;/li&gt;
      &lt;li&gt;$O(I)$ - objects with descriptions in the image $I$
        &lt;ul&gt;
          &lt;li&gt;$O(I) = { (Y_1^&lt;em&gt;, Z_1^&lt;/em&gt;), \ldots, (Y_i^&lt;em&gt;, Z_i^&lt;/em&gt;), \ldots, (Y_{N_i^&lt;em&gt;}^&lt;/em&gt;, Z_{N_i^&lt;em&gt;}^&lt;/em&gt;)}$&lt;/li&gt;
          &lt;li&gt;$Y_i^* \in \mathcal{Y}$ - the category of the $i$th object&lt;/li&gt;
          &lt;li&gt;$Z_{N_i^&lt;em&gt;}^&lt;/em&gt; \in \mathcal{Z}$ - the bounding box information of $i$th object, ex. $(x, y, w, h)$&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Object Detection $D(I, \lambda)$
    &lt;ul&gt;
      &lt;li&gt;이미지 $I$에 Objects $O(I)$를 찾아내는 함수 $D$를 구하기&lt;/li&gt;
      &lt;li&gt;$D(I, \lambda) = { (Y_1, Z_1), \ldots, (Y_i, Z_i),\ldots, (Y_{N_i(\lambda)}, Z_{N_i(\lambda)})}$&lt;/li&gt;
      &lt;li&gt;$\lambda$로 false alarm과 missed detection 조절&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-performance-measure&quot;&gt;3. Performance Measure&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Ground Truth $O(I)$와 Prediction $D(I, \lambda)$를 비교
    &lt;ul&gt;
      &lt;li&gt;classification : 각각의 class를 정확하게 예측했는가?&lt;/li&gt;
      &lt;li&gt;regression : 정확하게 Bounding Box의 위치와 크기를 지정했는가?
        &lt;ul&gt;
          &lt;li&gt;Intersection Over Union(IoU)
            &lt;ul&gt;
              &lt;li&gt;&lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_fourth/fig1.PNG&quot; alt=&quot;IOU&quot; /&gt;&lt;/li&gt;
              &lt;li&gt;&lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_fourth/fig2.PNG&quot; alt=&quot;IOU Example&quot; /&gt;&lt;/li&gt;
              &lt;li&gt;IoU값이 일정이상일 경우 정답으로 간주
                &lt;ul&gt;
                  &lt;li&gt;PASCAL VOC : 0.5&lt;/li&gt;
                  &lt;li&gt;ImageNet : min(0.5, wh / (w+10)(h+10))&lt;/li&gt;
                  &lt;li&gt;MS COCO : 0.5, 0.55, $\ldots$, 0.95&lt;/li&gt;
                &lt;/ul&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mean Average Precision(mAP)
    &lt;ul&gt;
      &lt;li&gt;Average Precision
        &lt;ul&gt;
          &lt;li&gt;&lt;img src=&quot;https://img1.daumcdn.net/thumb/R720x0.q80/?scode=mtistory2&amp;amp;fname=http%3A%2F%2Fcfile2.uf.tistory.com%2Fimage%2F220E10365869F5CA344843&quot; alt=&quot;AP&quot; /&gt;&lt;/li&gt;
          &lt;li&gt;Recall을 0부터 1까지 0.1단위로 증가시키면서 얻은 precision값을 평균내어 계산&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;mAP
        &lt;ul&gt;
          &lt;li&gt;전체 Class에 대해서 AP를 계산하여 평균낸 값&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Frame Per Second
    &lt;ul&gt;
      &lt;li&gt;초당 처리가능한 이미지의 수 (이미지 종류와 하드웨어에 따라 상대적인 값)&lt;/li&gt;
      &lt;li&gt;최근 논문은 정확도 뿐만 아니라 속도에도 집중하는 경향&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;4-miscellanea&quot;&gt;4. miscellanea&lt;/h2&gt;
&lt;h3 id=&quot;techniques-before-deep-learning&quot;&gt;Techniques before deep learning&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Sliding Windows
&lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_first/fig6_sliding_window.PNG&quot; alt=&quot;sw1&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Selective Search
&lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_first/fig7_selective_search.PNG&quot; alt=&quot;ss&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;stages&quot;&gt;Stages&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;1-stage object detector
&lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_second/fig6_1stage.PNG&quot; alt=&quot;1-stage object detector&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;2-stage object detector
&lt;img src=&quot;https://hoya012.github.io/assets/img/object_detection_second/fig5_2stage.PNG&quot; alt=&quot;2-stage object detector&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;dataset&quot;&gt;Dataset&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;PASCAL VOC
    &lt;ul&gt;
      &lt;li&gt;Pattern Analysis, Statistical Modeling and Computational Learning&lt;/li&gt;
      &lt;li&gt;20 Object types
        &lt;ul&gt;
          &lt;li&gt;사람: 사람&lt;/li&gt;
          &lt;li&gt;동물: 새, 고양이, 소, 개, 말, 양&lt;/li&gt;
          &lt;li&gt;탈것: 비행기, 자전거, 보트, 버스, 승용차, 오토바이, 기차&lt;/li&gt;
          &lt;li&gt;사물: 병, 의자, 식탁, 화초, 소파, 모니터&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;대표적으로 VOC05, VOC12 가 많이 사용됨&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cocodataset.org/#home&quot;&gt;MS COCO&lt;/a&gt;
    &lt;ul&gt;
      &lt;li&gt;91 Object types, 328k images, 2.5m labeled instance&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://www.researchgate.net/profile/Minkesh_Asati/publication/334867305/figure/fig1/AS:787322064875522@1564723616547/Samples-of-annotated-images-in-the-MS-COCO-dataset-from-12.jpg&quot; alt=&quot;cocoex&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/walton-wang929/Object_Detection&quot;&gt;Object Detection Survey by walton-wang929&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://arxiv.org/abs/1809.03193&quot;&gt;Recent Advances in Object Detection in the Age of Deep Convolutional Neural Networks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hoya012.github.io/blog/Tutorials-of-Object-Detection-Using-Deep-Learning-what-is-object-detection/&quot;&gt;HOYA012’s Research Blog - Tutorial of Object Detection using Deep Learning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>최혁근</name></author><category term="computervision" /><category term="objectdetection" /><summary type="html">디지털 사이니지 프로젝트에는 여러가지 Deep Learning Task들이 존재한다.그 중 가장 기초가 되는 Object Detection 관련 연구상황을 정리하고 실습한다.</summary></entry><entry><title type="html">권승진 샘플</title><link href="http://0.0.0.0:4000/2021/04/12/Sample-%EA%B6%8C%EC%8A%B9%EC%A7%84.html" rel="alternate" type="text/html" title="권승진 샘플" /><published>2021-04-12T10:00:00-05:00</published><updated>2021-04-12T10:00:00-05:00</updated><id>http://0.0.0.0:4000/2021/04/12/Sample-%EA%B6%8C%EC%8A%B9%EC%A7%84</id><content type="html" xml:base="http://0.0.0.0:4000/2021/04/12/Sample-%EA%B6%8C%EC%8A%B9%EC%A7%84.html">&lt;h1 id=&quot;큰-제목&quot;&gt;큰 제목&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;인용구 😍
야호야호야호
&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;작은-제목&quot;&gt;작은 제목&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;인용구 askldjlaskjdlkas;dlkalksjdasldkjlaskdasdasdasdasdasd&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;더-작은-제목&quot;&gt;더 작은 제목&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;인용구&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>권승진</name></author><category term="computervision" /><category term="objectdetection" /><summary type="html">동해물과 백두산이 마르고 닳도록 하느님이 무궁화 꽃이 피었습니다.</summary></entry><entry><title type="html">제목</title><link href="http://0.0.0.0:4000/1986/12/29/Sample.html" rel="alternate" type="text/html" title="제목" /><published>1986-12-29T09:00:00-06:00</published><updated>1986-12-29T09:00:00-06:00</updated><id>http://0.0.0.0:4000/1986/12/29/Sample</id><content type="html" xml:base="http://0.0.0.0:4000/1986/12/29/Sample.html">&lt;h1 id=&quot;큰-제목&quot;&gt;큰 제목&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;인용구&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;작은-제목&quot;&gt;작은 제목&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;인용구&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;hr /&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;더-작은-제목&quot;&gt;더 작은 제목&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;인용구&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>작성자</name></author><category term="python" /><category term="aws" /><summary type="html">메인페이지 노출 description</summary></entry></feed>